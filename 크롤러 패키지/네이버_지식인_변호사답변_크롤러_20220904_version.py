{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "7d84d87b",
   "metadata": {},
   "source": [
    "# 네이버 지식인 변호사(전문가) 답변 크롤러\n",
    "\n",
    "<br>\n",
    "\n",
    "# Law_N_IN_Crawler Made by Ukjang\n",
    "\n",
    "<br>\n",
    "\n",
    "## 1. 제작 의의\n",
    "#### 1. 지식 IN 법률 답변 중 전문가(변호사)답변만 크롤링 하여 상대적으로 빅데이터가 적은 법률 분야의 데이터 확보\n",
    "#### 2. Seq2Seq with Attention, 챗봇(KoGPT, T5) 등 법률 답변 챗봇에 활용 가능\n",
    "\n",
    "<br>\n",
    "\n",
    "## 2. 크롤러 플로우\n",
    "#### 1. 원하는 법률 카테고리, 최대 확인 변호사 수,  최대 데이터 수 선택\n",
    "    -> 최대 길이는 원하는 자료양의 120%로 입력 권장.\n",
    "    -> 모든 데이터 크롤링을 원한다면, 최대 변호사수 10000, 최대 데이터수 500000 설정 권장\n",
    "#### 2. 해당 카테고리의 최근 99개 지식인 답변 해준 전문가 프로필 리스트 생성 \n",
    "    -> 네이버에서 제공하는 지식 IN 최대 조회 가능 페이지 수가 99개.\n",
    "    -> 이를 우회하기 위한 방법으로 개인 답변 로그 조회(조회 수 제한 없음)\n",
    "#### 3. 해당 리스트 전문가들의 답변 리스트 도출 및 들어가서 Q&A 크롤링\n",
    "    -> 전문가 답변은 아주 높은 확률로 중복으로 안달림(경험적)\n",
    "#### 4. 결과값 도출\n",
    "\n",
    "<br>\n",
    "\n",
    "## 3. 라이브러리\n",
    "\n",
    "#### requests, bs4, pandas, re, tqdm\n",
    "<br>\n",
    "    \n",
    "## 4. Insight\n",
    "#### 1.우리나라 법은 조례나 시행령 등 세세한 부분에서의 개정은 자주 이루어지지만 기본적으로 법이 자주 바뀌는 나라는 아님\n",
    "#### 2.최신 활동 변호사(최신 1980개 내) 데이터 반영\n",
    "#### 3.완벽하게 개인에 맞춤회된 답변 보다는 기본적인 법률 가이드라인 제공\n",
    "    -> 지식인 답변 특성상, 완벽하게 개인 맞춤화된 1대 1 상담 보다는 전반적인 방향성 제시에 특화된 답변이 많음.\n",
    "\n",
    "<br>    \n",
    "    \n",
    "## 5. 이슈\n",
    "#### 1.요청 URL 과 실제 페이지(수작업으로 넘겼을 때)가 달라서 데이터 누락 발생\n",
    "    -> 강사님과 논의 결과, 서버내에서 주고 받는 과정에서 데이터 누락 및 추가가 발생하거나 비공개 답변 등으로 인한 문제. 내부인이 아닌 이상 해결 불가능\n",
    "    -> selenium 사용해도 똑같은 이슈 발생. requests 채택\n",
    "#### 2.전처리는 변호사별 소개멘트 등을 고려하여 따로 처리 필요\n",
    "    -> Ex). **로펌에 소속되어있는 민법 전문 변호사 억장이입니다. 와 같이 공통된 부분을 따로 처리해줘야 하고 일반적으로 변호사별 정형화된 문구가 있음.\n",
    "#### 3. 시간이 오래걸림\n",
    "    -> 각 변호사 프로필에 들어가서 해당 카테고리 답변만 href를 받아옴\n",
    "    -> 답변수 200000개 넘어가는 변호사도 있음. 이럴 경우 확인하는데 엄청난 시간이 소요됨\n",
    "\n",
    "<br>   \n",
    "<br>\n",
    "<br>\n",
    "\n",
    "*** 세금세무는 소분류가 너무 많아서 제외하였습니다.***\n",
    "\n",
    "<br>   \n",
    "<br>\n",
    "<br>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "974e027f",
   "metadata": {},
   "outputs": [],
   "source": [
    "def Law_N_IN_Crawler():\n",
    "    # 라이브러리\n",
    "    import requests\n",
    "    from bs4 import BeautifulSoup as bs\n",
    "    import re\n",
    "    import pandas as pd\n",
    "    import numpy as np\n",
    "    from tqdm.notebook import tqdm\n",
    "    \n",
    "    # 법률 카테고리 url 파라미터 dict\n",
    "    cate_dict = {\n",
    "    '교통 사고, 위반': '01',\n",
    "    '부동산, 건축': '02',\n",
    "    '신용, 파산': '03',\n",
    "    '가족, 이혼': '04',\n",
    "    '지식재산권': '05',\n",
    "    '형사사건': '06',\n",
    "    '소비자관련법, 상법': '07',\n",
    "    '청소년관련법' : '08',\n",
    "    '재판, 소송 절차': '11',\n",
    "    '계약': '12',\n",
    "    '손해배상': '13',\n",
    "    '형벌, 형집행': '14',\n",
    "    '법학, 법이론': '15',\n",
    "    '언론, 미디어 관련법': '16',\n",
    "    '외국법': '17',\n",
    "    '헌법': '18',\n",
    "    '행정법': '19',\n",
    "    '민법': '20',\n",
    "    '민사소송':'21' ,\n",
    "    '노동법': '22',\n",
    "    '등기': '23',\n",
    "    '민사집행': '24',\n",
    "    '산업재해': '25'\n",
    "    }\n",
    "    print('지식인 법률 카테고리', '\\n')\n",
    "    print(list(cate_dict.keys()), '\\n')\n",
    "    \n",
    "    # 카테고리 입력\n",
    "    while True :\n",
    "        cate_input = input('원하는 법률 카테고리를 입력하세요 : ')\n",
    "        # 카테고리 확인\n",
    "        if cate_input not in list(cate_dict.keys()) : \n",
    "            print('법률 카테고리를 다시 확인하세요')\n",
    "            print(cate_dict.keys(),'\\n')\n",
    "            continue\n",
    "        else :\n",
    "            break\n",
    "\n",
    "    # 최대길이 입력\n",
    "    print('\\n', '** 변호사 프로필 확인 수는 소요 시간에 큰 영향을 줍니다.**', '\\n')\n",
    "    while True :\n",
    "        lw_profile_input = input('답변을 확인할 최대 변호사 수를 입력해주세요 : ')\n",
    "        # 정수확인\n",
    "        try : \n",
    "            lw_profile = int(lw_profile_input)\n",
    "            print('\\n')\n",
    "            break\n",
    "        except :\n",
    "            print('정수로 다시 입력해주세요')\n",
    "            continue\n",
    "            \n",
    "            \n",
    "    # 최대길이 입력\n",
    "    while True :\n",
    "        max_data_input = input('최대 데이터 수를 설정해주세요 : ')\n",
    "        # 정수확인\n",
    "        try : \n",
    "            max_int = int(max_data_input)\n",
    "            print('\\n')\n",
    "            break\n",
    "        except :\n",
    "            print('정수로 다시 입력해주세요')\n",
    "            continue\n",
    "    \n",
    "    # 변호사 프로필 리스트 생성\n",
    "    \n",
    "    cate_url = '602' + cate_dict[cate_input]\n",
    "    \n",
    "    #전문가 답변 리스트 가는 url\n",
    "    url_profile_before = 'https://kin.naver.com/userinfo/expert/answerList.naver?u='\n",
    "    lawyer_profile_dict = {}\n",
    "    print('변호사 프로필 리스트 생성 :')\n",
    "    for pg in tqdm(range(1, 100)):\n",
    "        url = 'https://kin.naver.com/qna/expertAnswerList.naver?'\n",
    "        parameters = f'dirId={cate_url}&page={pg}'\n",
    "        url = url + parameters\n",
    "        html = requests.get(url)\n",
    "        soup = bs(html.text, 'html.parser')\n",
    "        for lw in soup.select('#au_board_list tr'):\n",
    "            try :\n",
    "                lw_name = lw.select_one('.questioner').text\n",
    "                lw_href = lw.select_one('.questioner a')['href'][23:]\n",
    "                lw_href = url_profile_before + lw_href\n",
    "                lawyer_profile_dict[lw_name] = lw_href\n",
    "            except :\n",
    "                    pass\n",
    "    print('총 변호사 프로필 수 :',  len(lawyer_profile_dict) )    \n",
    "    \n",
    "    \n",
    "    # 변호사 qa 리스트\n",
    "    cate_text = cate_input\n",
    "    result_list = []\n",
    "    qa_list = []\n",
    "\n",
    "    # 변호사 프로필 확인 수 보정\n",
    "    if lw_profile > len(lawyer_profile_dict):\n",
    "        lw_profile = len(lawyer_profile_dict)\n",
    "    elif lw_profile <= 0 :\n",
    "        lw_profile = 1\n",
    "\n",
    "    print('확인할 변호사 수: ', lw_profile)\n",
    "    for lw_name in tqdm(list(lawyer_profile_dict.keys())[:lw_profile]):\n",
    "        url = lawyer_profile_dict[lw_name]\n",
    "        html = requests.get(url)\n",
    "        soup = bs(html.text, 'html.parser')\n",
    "        nm_answer = soup.select_one('.container-fluid-content__left ul .sub .num').text[1:-1].replace(',', '')\n",
    "        nm_answer = int(nm_answer) // 20\n",
    "    #     print(lw_name, '페이지수 : ', nm_answer)\n",
    "        print(lw_name, '변호사 프로필 시작.  총 페이지수: ', nm_answer)\n",
    "        for pg in tqdm(range(1, nm_answer + 1)):\n",
    "            url_qa = url + f'&page={pg}'\n",
    "            html = requests.get(url_qa)\n",
    "            soup = bs(html.text, 'html.parser')\n",
    "            for qa in soup.select('#au_board_list tr'):\n",
    "                try :\n",
    "                    cate = soup.select('#au_board_list tr')[0].select_one('.field').text\n",
    "                    if cate == cate_text :\n",
    "                        title = qa.select_one('a').text\n",
    "                        href = 'https://kin.naver.com' + qa.select_one('a')['href']\n",
    "    #                     print(title, href)\n",
    "                        qa_list.append([title, href])\n",
    "                except :\n",
    "                    pass\n",
    "    print('\\n', '지식인 Q&A 크롤링을 시작합니다. 데이터수 : ', len(qa_list))\n",
    "    # 지식인 qa 크롤링\n",
    "    for qa in tqdm(qa_list):\n",
    "        try :\n",
    "            url = qa[1]\n",
    "            html = requests.get(url)\n",
    "            soup = bs(html.text, 'html.parser')\n",
    "        except :\n",
    "            continue\n",
    "        try :\n",
    "            q_title = soup.select_one('.question-content .c-heading__title').text.strip()\n",
    "            q_content = soup.select_one('.question-content .c-heading__content').text.strip()\n",
    "        except :\n",
    "            continue\n",
    "        ans_list = ''\n",
    "        for ans in soup.select('.answer-content__list._answerList'):\n",
    "            answer = ''\n",
    "            for ans_txt in ans.select('.se-module.se-module-text p') :\n",
    "                answer += ans_txt.text\n",
    "            ans_list += answer + '\\n'\n",
    "        result_list.append([q_title, q_content, ans_list])\n",
    "        if len(result_list) >= max_int:\n",
    "            print('최대 데이터수에 도달하였습니다.', '\\n')\n",
    "            break\n",
    "    df = pd.DataFrame(result_list, columns=['질문_제목', '질문_본문', '답변'])\n",
    "    display(df)\n",
    "    \n",
    "    return result_list"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
